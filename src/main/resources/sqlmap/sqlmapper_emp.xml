<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- Mybatis에게 Mapper 경로를 적어야 한다 -->
<mapper namespace="com.example.first_spring.mapper.EmpMapper">
	<!-- id = mapper 메소드 이름 -->
	<select id="getEmpList" resultType="EmpVO">
		SELECT
			empno,
			ename,
			job
		FROM emp
	</select>
	<select id="getEmp" resultType="EmpVO">
		SELECT
			ename
		FROM emp
		WHERE empno = #{empNo}
		<!-- MyBatis 문법. 중괄호 안에 mapper의 파라미터와 같은 이름을 적어준다. -->
	</select>
	
	<select id="selectEmpNameAndJob" resultType="EmpVO">
		SELECT
			ename,
			job
		FROM emp
		WHERE ename like '%L%L%'
	</select>
	<select id="selectEnameAndComm" resultType="EmpVO">
		SELECT
			ename,
			comm
		FROM emp
		WHERE comm is null
	</select>
	<select id="selectEnameAndHiredate" resultType="EmpVO">
		SELECT
			ename,
			hiredate 
		FROM emp 
	    WHERE
	        <![CDATA[
			hiredate >= '1980-12-17' 
			and hiredate <= '1982-01-23'
			]]>
	</select>
	
	<select id="selectEmpName" resultType="EmpVO">
		SELECT
			empno,
			ename,
			job,
			comm
		FROM emp
		WHERE 
			job = #{job}
		and 
			sal >= #{sal}
	</select>

	
	
	<!-- 숙제 0번 -->
	<select id="selectNameAndComm" resultType="EmpVO">
		SELECT 
			ename,
			sal 
		FROM emp
		WHERE 
			(deptno = 10 
		OR
			deptno = 30)
		AND 
			sal > #{sal}
	</select>
	
	<!-- 숙제 퍼시스턴스 로직 구현 -->
	<!-- 숙제 1번. MGR이 NULL인 사원 이름, 직업, 급여 조회 -->
	<select id="selectIfAll" resultType="EmpVO">
		SELECT 
			*
		FROM emp
		WHERE mgr is null
	</select>
	<!-- 숙제 2번. 특정 년도에 입사한 사원 이름, 직업, 입사날짜, 급여 조회-->
	<select id="selectYearEmp" resultType="EmpVO">
		SELECT 
			ename,
			job,
			hiredate,
			sal
		FROM emp
		WHERE date_format(HIREDATE, '%Y') = #{year}
	</select>
	<!-- 숙제 3번. 입사 날짜가12월에 입사한 사원 이름, 급여 조회-->
	<select id="selectMonthEmp" resultType="EmpVO">
		SELECT 
			ename,
			sal
		FROM emp
		WHERE date_format(HIREDATE, '%m') = #{month}
	</select>
	<!-- 숙제 4번. 특정 job에 속한 사원번호, 사원 이름, 입사날짜 조회 -->
	<select id="selectHiredateEmp" resultType="EmpVO">
		SELECT 
			EMPNO,
			ENAME,
			HIREDATE 
		FROM emp
		WHERE job = #{job} 
	</select>
	<!-- 숙제 5번. 특정 사원의 모든 정보 조회(emp, dept 테이블 조인) -->
	<resultMap type="DeptVO" id="DeptVO">
		<result column="deptno" property="deptno"/>
		<result column="dname" property="dname"/>
		<result column="loc" property="loc"/>
	</resultMap>
	<resultMap type="EmpVO" id="EmpVO">
		<result column="empno" property="empno"/>
		<result column="ename" property="ename"/>
		<result column="job" property="job"/>
		<result column="mgr" property="mgr"/>
		<result column="hiredate" property="hiredate"/>
		<result column="sal" property="sal"/>
		<result column="comm" property="comm"/>
		<result column="deptno" property="deptno"/>
		<collection property="deptVO" resultMap="DeptVO"/>
	</resultMap>
	<select id="selectAllEmpInfo" parameterType="EmpVO" resultMap="EmpVO">
		SELECT 
			e.empno,
			e.ename,
			e.job,
			e.mgr,
			e.hiredate,
			e.sal,
			e.comm,
			e.deptno,
			d.deptno,
			d.dname,
			d.loc
			<!-- *로 표시해도 됨 -->
		FROM emp e
		INNER JOIN dept d
		ON e.deptno = d.deptno
		WHERE e.empno = #{empno}
	</select>
	
	
	<!-- 지금 우리가 쓰는건 MySql, 만약 DB가 Oracle이면 Insert할 때 PK문법이 다르다(값 대신 시퀀스를 추가해야 함) -->
	
	<delete id="deleteEmp">
		DELETE FROM emp
		WHERE empno = #{empno}
	</delete>
	
	<update id="updateEmp">
		UPDATE emp
		SET 
			sal = #{sal},
			job = #{job}
		WHERE empno = #{empno}
		<!-- 여기서 받는 #{}들은 postman에서 json으로 입력한 값들임 -->
	</update>
	
	<!-- 05.10 수업내용 -->
	<insert id="insertEmp">
		INSERT INTO emp
		(
			empno,
			ename,
			deptno,
			hiredate
		)
		VALUES
		(
			#{empno},
			#{ename},
			(select 
				d.DEPTNO 
			from emp e 
			right join dept d 
			on e.DEPTNO = d.DEPTNO 
			where e.DEPTNO is null ),
			now()
		)
		<!--
		VALUES
		(
			#{empno},
			#{ename},
			#{deptno},
			now()
		)
		-->
	</insert>
	<select id="AllEmpList" resultType="EmpVO">
		select 
			*
		from emp
	</select>
	
	<select id="selectDeptNo" resultType="EmpVO">
	<!-- 결과타입을 int로 해도 되지만 우선 크게 만듦 -->
		SELECT 
			d.DEPTNO 
		FROM emp e 
		right join dept d 
		ON e.DEPTNO = d.DEPTNO 
		WHERE e.DEPTNO is null 
	</select>
	<select id="selectEmpStartsName" resultType="int">
		select 
			count(ENAME)
		from emp
		where ENAME like CONCAT(#{first}, '%')
	</select>
	
	<!-- 5.11 수업 -->
	<!-- true가 파라미터로 들어오면 사수 있는 사원 조회
		false가 파라미터로 들어오면 사수 없는 사원 조회 -->
	<select id="selectEmpMgr" resultType="EmpVO">
	SELECT 
		empno,
		ename,
		mgr
	FROM emp 
	WHERE 1=1
	<!-- 1=1은 의미없음 -->
	<if test='isMgr.equals("true")'>
	<!-- test에는 #{}으로 표현하지 않는다 -->
		AND mgr IS NOT NULL		
	</if>
	<if test='isMgr.equals("false")'>
		AND mgr IS NULL	
	</if>
	</select>
	<!-- MyBatis에서 if 사용을 최소화 하는게 좋다. 오류 찾기 힘듦 -->
	
	<!-- 문제 1. 사원번호가 7902번인 사원 job을 SALESMAN, sal을 3500으로 수정하시오. -->	
	<!-- 선생님 풀이 -->
	<update id="updateEmpJobSalTeacher">
		UPDATE emp
		SET
			job = #{job},
			sal = #{sal}
		WHERE empno = #{empno}
	</update>
	<!-- 선생님 풀이 2번 -->
	<!-- 문제2. 사원번호가 7844번인 사원의 COMM이 0이거나 null이면 기존 급여에서 500을 추가(수정)하시오. -->
	<select id="selectEmpCommSal" resultType="EmpVO">
		SELECT
			empno,
			comm,
			sal
		FROM emp
		WHERE empno = #{empno}
	</select>
	<update id="updateEmpSal">
		UPDATE emp
		SET sal = #{sal}
		WHERE empno = #{empno}
	</update>
	
	
	<!-- 5.12 수업 -->
	<select id="selectEmpMapList" resultType="map">
		SELECT
			empno as a,
			<!-- as로 컬럼의 이름을 바꾸면 포스트맨의 결과에도 반영된다 -->
			ename,
			job,
			sal,
			<!-- list로 쓸 경우 아래 3개는 vo에 변수를 추가했어야 함 -->
			e.deptno,
			d.dname,
			d.loc
		FROM emp AS e
		INNER JOIN dept AS d
		ON e.deptno = d.deptno
	</select>
</mapper>